let prod;
prod='<table border="1"><caption>Конструкция switch</caption>'
+'<td id="lev">'
+'<li><a>Синтаксис</a> <i>(имеет один или более блок(ов) case и необязательный '
+'парметр default)</i><br>'
+'switch(x){<br>'
	+'case "value1": //=if(x==="value")<br>'
		+'...<br>'
	+'   [break]<br>'
+'	case "value2": //=if(x==="value2")<br>'
		+'...<br>'
	  +' [break]<br>'
	+'default:<br>'
  +'      ...<br>'
+'[break]}	<br>'
+'<ul>'
+'<li type="disc">Переменная x проверяется на строгое равенство первому значению '
+'value1, затем второму value2 и так далее.</li>'
+'<li type="disc">Если соответствие установлено - switch начинает выполняться от '
+'соотвествующей директивы case и далее, до ближайшего break(или до конца switch).</li>'
+'<li type="disc">Ни один case не совпал - выполняется default(если указан).</li>'
+'</ul></li><li>'
+'<a>Пример работы</a><br>'
+'let a=2+2;<br>'
+'switch(a){<br>'
  +' case 3:<br>'
+'alert("malo"); break;<br>'
  +' case 4:<br>'
+'alert("verno"); break;<br>'
  +' case 5:<br>'
+'alert("mnogo"); break;<br>'
  +' default:<br>'
+'alert("bred");}   <i>//verno</i><br>'
+'</li><li><a>Без break</a><br>'
+'let a=2+2;<br>'
+'switch(a){<br>'
	+'case 3: alert("malo");<br>'
	+'case 4: alert("verno");<br>'
	+'case 5: alert("mnogo");<br>'
	+'default: alert("bred");<br>'
+'} <i>//verno mnogo bred</i><br>'
+'<i>Забавный момент:</i><br>'
+'let a="1"; <i>//!</i><br>'
+'let b=0;<br>'
+'switch(+a){<br>'
	+'case b+1:<br>'
	+'alert("proydet, +a=1 ");<br>' 
+'	break;<br>'
	+'default:<br>'
+'alert("net");} <i>//proydet, +a=1</i><br>'
+'</li><li><a>Меж прочим, case можно группировать</a><br>'
+'let a=3;<br>'
+'switch(a){<br>'
	+'&ensp;case 4:<br>'
+'	   &ensp;&ensp;alert("Verno!");<br>'
	  +' break;<br>'
	+'&ensp;&ensp;case 3: <i>//группируем case</i><br>'
+'&ensp;	case 5:<br>'
	+'   alert("neverno!");<br>'
+'	   alert("vali na mathematik!");<br>'
	  +' break;<br>'
	+'default: alert("stranno!");<br>'
+'}	<i>//neverno vali na mathematik</i><br>'
+'</li>'
	+'<ol><h5>Задачи</h5>'
+'<li><a>Напишите if, аналогичный switch</a><br>'
+'let a=prompt("browser","");<br>'
+'if(a=="Edge") {alert("this is Edje");}<br>'
+'else if(a=="Chrome"||a=="Firevox"||a=="Safari"||a=="Opera") {alert("poydot");}<br>'
+'else {alert("ne v kurse");} <i>//всё верно выдаёт</i><br></li><li>'
+'<a>Переписываем if на switch</a><br>'
+'const number=+prompt("givo number 0-3","");<br>'
+'switch(number){<br>'
 +'  case 0:alert ("null"); break;<br>'
  +' case 1:alert ("odin"); break;<br>'
+'   case 2:alert ("dva"); break;<br>'
  +' default: alert("no");<br>'
+'} <i>//всё верно выдаёт</i><br>'
+'else {alert("ne v kurse");} <i>//всё верно выдаёт</i><br>'
+'</li></ol>'
+'<ol><h4>Функции</h4>'
+'<a>Примеры встроенных функций: alert(message),prompt(massage,default),'
+' confirm(question) </a><i> или, как обычно, свои объявить</i><br>'
+'<li><a>Объявление функции</a><br>'
+'typa: <br>function showMessage(){<br>'
+'alert("Privet agentura");<br>}'
+'showMessage(); <i>//Privet agentura</i></li><li>'
+'<a>Локальные переменные</a><br>'
+'function showM(){<br>'
	+'let mes="Privet, I JS!"; <i>//переменная локальная</i><br>'
+'alert(mes);}<br>'
+'showM(); <i>//Privet, I JS!</i><br>'
+'alert(mes); <i>//вообще ничего не загрузил</i><br></li><li>'
+'<a>Внешние переменные</a><br>'
+'let userName="Goga";<br>'
+'function showM(){<br>'
	+'let mes="Hello, "+ userName;<br>'
+'alert(mes);}<br>'
+'showM(); <i>//Hello, Goga</i><br>'
+'<a>Ещё:</a><br>'
+'let userN="Goga";<br>'
+'function showM(){<br>'
	+'userN="Vazgen"; <i>//pomenjali</i><br>'
	+'let mes="privet, "+userN;<br>'
+'alert(mes);}<br>'
+'alert(userN); <i>//Goga (pered vizovom)</i><br>'
+'showM(); <i>//Privet, Vasgen</i><br>'
+'alert(userN); <i>//Vasgen (очень странная коснтрукция)</i><br>'
+'<i>в коде ниже показана работа использования <br>функцией уже локальной переменной</i><br>'
+'let userN="Vazgen";<br>'
+'function showM(){<br>'
	+'let userN="Goga"; <i>//vnutri</i><br>'
	+'let mes="Privet, "+userN;<br>'
	+'alert(mes);<br>'
+'} showM(); <i>//Privet, Goga</i><br>'
+'alert(userN); <i>//Vazgen (snarugi)</i><br>'
+'<a>глобальные переменные видны из любой функции</a><br></li><li>'
+'<a>Параметры</a><br>'
+'<i>Выглядит это примерно так:</i><br>'
+'function showM(form,text){ <i>//param from,text</i><br>'
+'alert(form+": "+text);}<br>'
+'showM("Anna", "Privet!"); <i>//Anna: Privet!</i><br>'
+'showM("Anna","v porjadke?"); <i>//Anna: v porjadke?</i><br></li><li>'
+'<i>Покажем, как функция извне изменяет значение from</i><br>'
+'function showM(from,text){<br>'
	+'from="*"+from+"*"; <i>//украшение</i><br>'
	+'alert(from+": "+text);}<br>'
+'let from="Anna";<br>'
+'showM(from, "Hello"); <i>//*Anna*: Hello - !украшение есть</i><br>'
+'alert(from); <i>//Anna(логично, даже спорить не буду)</i><br>'
+'<img src="https://i.postimg.cc/Vs93TFHk/aip.png" width="380" hight="240"/>'
+'<ul><li type="disc">Параметр - переменная,указанная при объявлении</li>'
+'<li type="disc">Аргумент - значение, которое передаётся при вызове</li></ul></li><li>'
+'<a>Значение по умолчанию</a><br> showM("Anna"); <i>типа пример</i><br>'
+'<i>Но зададим полностью:</i><br>'
+'function showM(from,text="ничего не пишем"){<br>'
	+'alert(from+": "+text);<br>'
+'} showM("Anna"); <i>//Anna: ничего не пишем(смешно)</i><br></li><li>'
+'<a>Явная проверка не undefined</a><br>'
+'function showM(from,text){<br>'
+'	if(text===undefined){<br>'
		+'text="text no";}<br>'
	+'alert(from+": "+text);}<br>'
+'showM(); <i>//undefined: text no (как интересно)</i><br>'
+'function showM(from,text){<br>'
	+'<i>//...bla,bla</i><br>'
	+'text=text||"text no";<br>'
	+'alert(text);<br>'
+'} showM(); <i>//text no</i><br></li><li>'
+'<a>Альтернативные парметры по умолчанию<img '
+'src="https://i.postimg.cc/FdK47BVL/image.png" width="340"/></a><br>'
+'<i>Присваиваем значение потом:</i><br>'
+'function showM(text){<br>'
+'	if(text===undefined){ <i>//если параметра нет</i><br>'
	  +'text="no text";<br>'
	+'}alert(text);<br>'
+'}showM(); <i>//no text(ну, так и должно быть)</i><br>'
+'</li></ol>'
+'<ul><h4>Возврат значения</h4><li><i>Простейший пример:</i><br>'
+'function sum(a,b){<br>'
   +'return a+b;}<br>'
  +' let result=sum(12,23);<br>'
+'   alert(result); <i>//35</i><br>'
+'<a>вызовов return может быть больше одного<br><center>(покажем это)</center></a><nobr>'
+'function checkA(age){<br>'
+'	if(age>=18){<br>'
	+'(1)	return true;<br>'
+'	}else{<br>'
	+'(2)	return confirm("rodaki znajut?");<br>'
+'}}<br>'
+'let age=prompt("skoka let?",18);<br>'
+'if(checkA(age)){<br>'
	+'alert("dostup");<br>'
+'	}else{<br>'
	+'	alert("idi, klop");<br>'
+'		}<i>//программа пропустит в любом случае, если скажешь,<br> что предки знают</i><br>'
+'<i>return без значения - моментальный выход из функции</i><br>'
+'function showM(age){<br>'
	+'if(!checkA(age)){<br>'
	+'return;}else{<br>'
+'alert("Вы смотрите телевизор");<br>'
+'}} <i>//ничего не загрузилось</i><br></li><li>'
+'<a>Обязательно надо показать как работает<br>'
+'оператор нулевого слияния</a><br>'
+'function showC(count){<br>'
	+'<i>//null || undefined -> неизвестно</i><br>'
	+'alert(count ?? "Неизвестно");<br>'
+'}<br>'
+'showC(0); <i>//0</i><br>'
+'showC(null); <i>//Неизвестно</i><br>'
+'showC(); <i>//Неизвестно (всё правильно)</i><br></li><li>'
+'<a>Возврат значения</a><br>'
+'результат возвращается к источнику и используется там<br>'
+'function sum(a,b){<br>'
	+'return a+b;<br>'
+'} let result=sum(8,9);<br>'
+'alert(result); <i>//17</i><br></li>'
+'<li><a>Итог</a><ul>'
+'объявление функции имеет вид:<br>'
+'function имя(параметры,через,запятую){<br>'
+'&ensp;/*тело,код функции*/<br>}<br>'
+'<li type="square">Функции имеют доступ к внешним параметрам изнутри наружу</li>'
+'<li type="square">значения копируются в значения и становятся локальными</li>'
+'<li type="square">функция возвращает значение, иначе undefined</li>'
+'<i>есть следующие принципы имён функций</i><br>'
+'<li type="square">Имя функции чётко и понятно отображает её суть</li>'
+'<li type="square">Так как обычно это действие, то название часто является глаголом</li>'
+'<li type="square">Общепринятые префиксы: create.., show.., get.., check</li>'
+'</ul></li><hr><h5>заслушаем клоунов</h5>'
+'<br>?. let age=prompt("skoka let? ","");<br>'
  +' function checkA(age){<br>'
	+'   return(age>18)?true:confirm("Predki znajut? ");<br>'
   +'} checkA(age); <i>//работает</i><br>'
+'||.<i> - не идёт</i></li><li> '
+'<a>Поговорим об операторе continue</a><br>'
+'<i>прерывает выполнение на метке и функция продолжает работу<br> на следующей '
+'итерации</i><br><ul><i>поподробнее:</i><br>'
+'<li type="square">В цикле while оно переносит воток выполнения к условию</li>'
+'<li type="square">В цикле for оно переносит поток выполнения к финальному<br> выражению'
+' в описании цикла</li>'
+'</ul></li><ol><b>Примеры</b><br><li>'
+'<i>continue с циклом while</i><br>'
+'i=0;<br>'
+'n=0;<br>'
+'m=0;<br>'
+'while(i<5){<br>'
	+'i++;<br>'
	+'m+=i;<br>'
	+'if(i===3){<br>'
		+'continue;}<br>'
	+'n+=i;<br>'
+'}prompt("с тройкой",m); <i>//15</i><br>'
+'prompt("без тройки",n); <i>//12</i><br>'
+'<i>Вот парикольная. Использование continue вместе с меткой:</i><br>'
+'var i=0,j=0;<br>'
+'checkI:while(i<4){<br>'
+'	alert("i: "+i);<br>'
	+'i+=1;<br>'
  +' checkJ:while(j>4){<br>'
+'alert("j: "+j);<br>'
+'j-=1;<br>'
+'if(j%2==0)continue checkJ;<br>'
+'alert(j+"нечётное. ");<br>'
  +' }<br>'
+'alert("i= "+i );<br>'
+'alert("j= "+j );<br>'
+'}/*i: 0;i= 1;j= 0;<br>'
+'i: 1;i= 2;j= 0;<br>'
+'i: 2;i= 3;j= 0;<br>'
+'i= 3;i= 4;j= 0 <i>(именно так и никак иначе) а checkJ не нашёл</i>*/<br></li><li>'
+'<a>Пустая инструкция<br><href="https://postimg.cc/ThxwBZT1"><img src="https://i.postimg.cc/ThxwBZT1/pijs.png"></a><br>'
+'var arr=[1,2,3];<br>'
+'<i>//приравняем все значения массива к нулю</i><br>'
+'for(i=0; i&lt;arr.length; arr[i++]=0 <i>/*выражения*/</i>);<br>' 
+'alert(arr); <i>//0 0 0 (вот жмот)</i> <br>'

+'</li></ol>'
+'</ul>'
+'</td><td id="prav">'
  +'<a>А это наша правая колонка</a><br>'
    +'<ul><h4>export</h4> ставим:<br>'  
+'<li>перед объявлением переменных, функций и классов</li>'
+'<li>отдельно, при этом в фигурных скобках указывается, что именно экспортируется</li>'
+'</ul>'
+'<ol><h4>Функции</h4><i>(продолжаем)</i><br>'
+'<li>Function Expression<br>'
+'<i>объявление:</i><br>'
+'let sayHi=function(){<br>'
  +' alert("good");<br>'
+'   }; sayHi();<i>//good</i><br>'
+'<i>Тут переменная sayHi() полчает значение от function(){alert("text");}</i><br>'
+'<a>Так как функция является занчением, то:</a><br>'
+'function sayHi(){<br>'
	+'alert("Balbes");<br>'
+'} alert(sayHi); <i>//тут был произведён вывод кода</i><br>'
+'<i>(!) в js c функцией можно работать как со значением</i><br>'
+'function sayH(){ <i>//(1) создаём</i><br>'
  +' alert("Nonsens");}<br>'
+'let func=sayH; <i>//(2) копируем</i><br>'
+'func(); <i>//(3) Nonsens(это копия)</i><br>'
+'sayH(); <i>// Nonsens тоже (оригинал)</i><br>'
+'<ol><i>Ща, тут всё подробно разберём</i><br>'
+'<li>Function Declsration (1) создаёт функцию и помещает её в sayH</li>'
+'<li>В строке (2) её значение копируется в переменную func. Обращаем '
+'внимание, что скобок после sayH нет. Иначе бы в func был записан '
+'результат вызова sayH(), а не саму функцию</li>'
+'<li>О, чудо фнкции sayH() и func() идентичны</li></ol>'
+'<i>для объявления её тоже можно использовать:</i><br>'
+'let sayH=function(){ <i>//typa sozdali</i><br>'
+'alert("zdorovo");}<br>'
  +' let func=sayH;<br>'
+'   func(); <i>// zdorovo</i><br>'
+'<i>не забываем также, что в случае с Function Declaration ставится '
+'ставится точка с запятой(нужно для простоты кода)</i><br></li>'
+'<li><a>Функции - "колбэки"</a><br>'
+'Делаем так: пишем ask(question,yes,no), где<br>'
+'<a>question </a>- Текст вороса<br>'
+'<a>yes </a> - функция при ответе yes<br>'
+'<a>no</a> - функция при ответе no<br>'
+'<i>поехали: </i><br>'
+'function ask(question,yes,no){<br>'
	+'if(confirm(question))yes()<br>'
	+'	else no();}<br>'
+'function showO(){alert("ladno");}<br>'
+'function showC(){alert("otkaz");}<br>'
+'<i>//теперь функции showO и showC передаются в качетве аргумента</i><br>'
+'ask("otoydi",showO,showC); <i>//да, вопрос и два ответа</i><br>'
+'<a>аргументы showO и showC функции ask называются функциями-колбэками</a><br>'
+'<i>Можно и проще:</i><br>'
+'function ask(quest,yes,no){<br>'
	+'if(confirm(quest))yes()<br>'
+'else no();}<br>'
+'ask("Ты трезвый?",<br>'
    +'function(){alert("prohodi")},<br>'
	+'function(){alert("ne-a")}<br>'
+'	); <i>//реакция правильная</i><br></li><li>'
+'<h5>Учимся oтличать Function Declaration от Function Expression</h5><br>'
+'<ul><li type="disc"><i>Function Declaration</i><br>'
+'function sum(a,b){<br>'
+'&ensp;return a+b;}'
+'</li><li type="disc"><i>Function Expression</i><br>'
+'let sum=function(a,b){<br>'
+'&ensp;return a+b;<br>'
+'}; <i>//после всего выражения ставится ещё одна ;</i><br>'
+'</li></ul>'
+'Ещё важное отличие: <b>Function Expression создётся, когда выполнение доходит '
+'до него и затем уже может использоваться</b><br>'
+'<i>C Functioln Declaration всё обстоит иначе</i><br>'
+'<b>Function Declaration может(!) быть вызвана раньше, чем она объявлена</b><br>'
+'sayHi("Diana"); //Privet, Diana <i>уже вызвана</i><br>'
+'function sayHi(name){<br>'
	+'alert(`Privet, ${name}`);<br>'
+'} <i>//тут ничего нет</i><br>'
+'C Function Expression такой код вызвал бы ошибку<br>'
+'<a>Ещё маленькое дополнение: в строгом режиме, когда Function Declaration '
+'нахзодится в блоке {...}, функция доступна везде внутри блока, но не снаружи его.</a><br>'
+'<i>вот пример: </i><br>'
+'let age=prompt("skoka let? ",""); <i>//primer</i><br>'
+'if(age<18){<br>'
+'	welcome();           <i>  // \ (выполнится)</i><br>'
	+'function welcome(){  <i>//  |</i><br>'
+'	alert("Privet ");}     <i>//  |</i><br>'
	+'	welcome();         <i>// / (тоже сработает)</i><br>'
+'}else{<br>'
	+'function welcome(){<br>'
	+'	alert("Zdorovo")<br>'
+'}} <i>//скобочка закрывается и...</i><br>'
+'welcome(); <i>//Если менее 18, то три "привета" зараз</i><br>'
+'<i>Делаем так, чтобы функция была видна снаружи if. <a>Смотрим:</a></i><br>'
+'<a href="https://postimg.cc/MvzJwtmT">'
+'<img src="https://i.postimg.cc/MvzJwtmT/image.jpg" width="300" hight="20000"></a>'
+'let kol=prompt("Skoka tebe piva? ",18);<br>'
+'let welcome;<br>'
+'if(kol<18){<br>'
  +' welcome=function(){<br>'
    +'   alert("Malo!");<br>'
   +'}; <i>//!</i><br>'
   +'}else{<br>'
+'welcome=function(){<br>'
  +' alert("Bery!");<br>'
   +'};}<br>'
+'welcome(); <i>// да, всё верно показывает</i><br>'
+'<i>Ещё проще сделаем. Используем оператор ?:</i><br>'
+'let kol=prompt("Skoka piva?",18);<br>'
+'let welcome=(kol<18)?<br>'
   +'function(){alert("Malovato!");}:<br>'
  +' function(){alert("Pouydet");};<br>'
+'welcome(); <i>//работает</i>   <br>'
+'</li><ul><a>Забабахаем итог:</a>'
+'<li type="disc">Функции - это значения. Они могут быть присвоены, '
+'скопированы или объявлены в любом месте кода.</li>'
+'<li type="disc">Если функция объявлена как отдельная инструкция в основном '
+'потоке кода, то это "Function Declaration".</li>'
+'<li type="disc">Если функция была создана как часть выражения, то это '
+'"Function Expression0".</li>'
+'<li type="disc">Function Declaration обрабатываются перед выполнением '
+'блока кода. Они видны во всём блоке.</li>'
+'<li type="disc">Функции, объявленные при помощи Function Expression '
+'создаются только когда поток выполнения достишгает их.</li>'
+'</ul>'
+'<i>И последнее: </i><a>Function Declafation предпочтительнее</a><br>'
+'<a><img src="https://i.postimg.cc/4H7DLF64/func.jpg"><br>Наслаждаемся</a>'
+'<br><i href="https://postimages.org"><img src="https://i.postimg.cc/52Yd8RxN/gdn.jpg"><br>Ещё картинку вставим:</i>'
+'<li><a>do...while - цикл</a><br>'
+'<i>имеет вид: </i><br>'
+'do{<br>&ensp;выражения<br>}while(условия);<br>'
+'<i>маленький примерчик, где цикл выполняется пока i меньше 5(включая 5)</i><br>'
+'let i=0;<br>'
+'do{<br>'
	+'&ensp;i+=1;<br>'
	+'&ensp;alert(i);<br>'
+'}while(i<5); <i>//немного не так работает, но какая разница</i><br></li><li>'
+'<a>while - самостоятельный цикл:</a><br>'
+'while(условие)<br>&ensp;{выражения}<br><i>для одного выражения скобки обычно '
+'не ставят</i><br>'
+'Пример: <i>цикл работает, пока n меньше трёх</i><br>'
+'var n=0;<br>'
+'var x=0;<br>'
+'while(n<3){<br>'
+'n++;<br>'
+'x+=n;<br>'
+'alert(x);} <i>//1,3,6 (неожиданно. Но после третьего прохода цикл становится '
+'ложным и больше не выполняется)</i><br>'
+'<b>Да, избегайте бесконечных циклов, которые никогда не заканчиваются, когда '
+'Условие никогда не становится ложным</b><br>'
+'while(true){<br>alert("Hello World!");<br>} <i>// что-то подобное</i><br></li><li>'
+'<a>Метка</a><i>если надо, то надо рассмотреть отдельно</i><br>'
+'<i>Метки используются вместе с операторами break и continue</i><br>'
+'<a href="https://postimg.cc/JDvmqQPb"><img src="https://i.postimg.cc/JDvmqQPb/cjs.png" style="width:75%">'
+'</a><br><i>метка цикла JS</i><br>'
+'let str="";<br>'
+'loop1:for(let i=0;i<5;i++){<br>'
  +' if(i===1){<br>'
    +'  continue loop1;<br>'
   +'}<br>'
  +' str=str+i;   }<br>'
+'alert(str); <i>//0234 (сплошняком,без пробелов)</i><br></li>'
+'</ol><ul><a>Несколько примеров</a><br><li type="disc">'
+'<i style="text-decoration:underline">Метка в цикле с оператором continue</i><br>'
+'let i,j;<br>'
+'loop1:for(i=0;i<3;i++){ <i>//1 цикл с меткой "loop1"</i><br>'
  +' loop2:for(j=0;j<3;j++){ <i>//2 цикл с меткой "loop2"</i><br>'
+'      if(i===1&&j===1){<br>'
		+'  continue loop1;<br>'
	  +'}<br>'
	+'  alert("i= "+i+" j= "+j);<br>'
+'}} <i>//0,0; 0,1; 0,2; 1,0; 2,0; 2,1; 2,2</i><br></li><li type="disc">'
+'<i>ещё пример(тоже с continue):</i><br>'
+'let itemsPassed=0;<br>'
+'let i,j;<br>'
+'top:for(i=0;i<items.length;i++){<br>'
+'&ensp;	for(j=0;j<tests.length;j++){<br>'
		+'&ensp;&ensp;if(!tests[j].pass(items[i])){<br>'
	+'		&ensp;&ensp;continue top;<br>'
+'}}itemsPassed++;}<br>'
+'<i>//зачем он нужен, я не понял</i><br></li><li>'
+'<i>исользуем метку с оператором break в цикле</i><br>'
+'let i,j;<br>'
+'loop1: for(i=0;i<3;i++){ <i>//1 цикл</i><br>'
+'   loop2:for(j=0;j<3;j++){ <i>//2 цикл</i><br>'
      +'if(i===1&&j===1){<br>'
	+'  break loop1;}<br>'
  +' alert("i= "+i +"j= "+j);<br>'
+'}} <i>//0-0;0-1;0-2;1-0 (и всё)</i><br>'
+'<i>другой тест: тоже с break</i><br>'
+'let allPass=true;<br>'
+'let i,j;<br>'
+'top:for(i=0;i<items.length;i++){<br>'
	+'for(j=0;j<tests.length;j++){<br>'
+'		if(!tests[j].pass(items[i])){<br>'
		+'	allPass=false;<br>'
	+'		break top;<br>'
+'}}} <i>//где использовать, тоже не понял</i><br>'
+'<a>ещё: блокировка break;</a><br>'
+'foo:{<br>'
	+'&ensp;alert("Priva");<br>'
	+'&ensp;break foo;<br>'
	+'&ensp;alert("this is NO"); <i>ne budet</i><br>'
+'} alert("nu, budem");<br>'
+'<i>//Priva nu, budem, второго нет</i><br></li><li>'
+'<a>Оператор break</a> <i>используется для прерывания цикла</i><br>'
+'<ul><li type="disc">Когдаа используете break без метки, то он прерывает циклы: while, '
+'do...while, for. Или сразу переключает управление к следующей инструкции. '
+'</li><li type="disc">когда используется break с меткой прерывает отмеченное выражение'
+'</li>Синтаксис(примерный): 1. break; 2. break Метка;</ul></li><li>'
+'Пример 1 посмотрим:<br>'
+'for(i=0;i<a.length;i++){<br>'
	+'if(a[i]==theValue){<br>'
	+'	break;<br>'
+'	}} <i>//проходит по всем элементам, пока не надёт нужный</i><br>'
+'Пример 2, <i>удивляемся: </i><br>'
+'let sum=0;<br>'
+'while(true){<br>'
   +'&ensp;let value=+prompt("number: ","");<br>'
   +'&ensp;if(!value) break; <i>//(*)</i><br>'
  +'&ensp; sum+=value;<br>'
+'}alert("Summ: " + sum); <i>//1,2,3,a - 6</i><br>'
+'<i>Ещё пример прерывания метки:</i><br>'
+'var x=0;<br>'
+'var z=0;<br>'
+'labelCancelLoops:while(true){<br>'
	+'alert("Внешний цикл: "+x);<br>'
+'	x+=1;<br>'
	+'z=1;<br>'
+'	while(true){<br>'
		+'alert("Внутренний цикл: "+z);<br>'
	+'	z+=1;<br>'
+'		if(z===10&&x===10){<br>'
			+'break labelCancelLoops;<br>'
		+'}else if(z===10){<br>'
	+'		break;<br>'
+'}}} <i>//оба счётчики от 1 до 10 включительно(считают)</i><br>'
+'</li></ul>'		
+'</td></table>'

let ifel;
ifel='<table><h3>Красочно разукрасим</h3>'
+'<td id="levcool">'
+'<li><i>if else</i><br>'
+'<b>Присваивание в условном выражении</b><br>'
+'if ( x=y ) { /*инструкции*/ } <i>лучше не использовать</i><br>'
+'if (( x=y )) { /*функция*/ } <i>этот способ пойдёт</i></li>'
+'<li><a>import (инструкция)</a><br>'
+'<i>импорт ссылок на значения, которые экспортируются из '
+'внешнего модуля. Все модули находятся в строгом режиме</i><br>'
+'Для работы иструкции пропишите: script type="module"</li><ol>'
+'<a  style="color:maroon">Работаем с модулями</a><br>'
+'<a href="https://postimg.cc/JsxLbFy8"><img src="https://i.postimg.cc/JsxLbFy8/modjs.png" '
+'width="300" hight="250"<br>'
+'<li><a>Импорт всего содержимого модуля</a><br>'
+'import * as myModule from "/modules/my-module.js"; <br>'
+'<i>импорт осуществляется с помощью имени модуля</i></li>'
+'<li><a>Импорт единичного значения модуля</a> <i>(выборочное)</i><br>'
+'import { myExport } from "/modules/my-Module.js"</li>'
+'<li><a>Несколько единичных значений</a><br>'
+'import { foo, bar } from "/modules/my-module.js"; <i>'
+'два параметра вставляются в текущую область видимости</i></li>'
+'<li><a>Импорт значений с более подохящими именами</a><i>'
+'значения можно переименовывать. Вставим shortName и сделаем видимым</i><br>'
+'import { reallyReallyLongModuleExportname as shortName } from "'
+'/modules/my-module.js"</li>'
+'<li><a>Использованиек побочного эффекта вызванного модуля</a><br>'
+'<i>Запускается сам модуль, но никакая информация из него не импортируется(нужен'
+' только эффект)</i><br>Простешая версия<br>'
+'import myDefault from "/modules/my-module.js";</li>'
+'<li><a>Импорт значения по умолчанию</a><br><i>создаём дефолтный export&ensp;(понял, ради импорта)</i><br>'
+'-import myDefault from "/modules/my-module.js";<br><i>импортировать можно всё:</i><br>'
+'-import myDefault, * as myModule from "/modules/my-module.js";<br>'
+'<i>! myModule тут объявлена в качестве пространства имён</i> "или"<br>'
+'-import myDefault, {foo, bar} from "/modules/my-module.js";<br>'
+'<i>! конкретные значения поимённо</i></li>'
+'<li><a>Импорт переменных</a><br><ul><i>следующий код вызовет ошибку '
+'(смотри какой)</i>'
+'<li type="square">my-modules.js<br><i>export let <b>a = 2;</b><br>'
+'export let <b>b = 3;</b></i></li>'
+'<li type="square">main.js<br><i>import { a, b } from "/modules/my-module.js"<br>'
+'<a>a = 5;<br>b = 6;</a></i><br>'
+'Unsigned TypeError: Assignment to constant variable</i></li></ul><ul>'
+'<i>А такой будет рабочим:</i><br>'
+'<li type="disc"><a>my-modules.js:</a><br>'
+'export let <a>obj = { a: 2, b: 4 };</a></li>'
+'<li type="disc"><a>main.js:</a><br>'
+'import { obj } from "/modules/module.js";<br><a>obj.a = 1;<br>obj.b = 4;</a></li>'
+'</ul></li>'
+'<li><a>Динамический импорт</a><br>'
+'<i>тут вызов import() возвращает Promice.</i><br>'
+'import ("/modules/my-module.js").then ((module) => {<br>'
+'<i>//издеваемся над модулем</i><br>});<br>'
+'<i>await тоже пойдёт</i><br>'
+'let module=await import("/modules/my-module.js");</li>'
+'<ul><a>Пишем примеры</a> (импорт из впомогательного модуля. Если не поленился и написал)<br>'
+'<li type="disc"><h5>Модуль: file.js</h5><br>'
+'<i>Следующие модули пишем в отдельных файлах и подключаем их к бозовому (лень заморачиваться, '
+'поэтому просто обозначу)</i><br>'
+'function getJSON(url, callback){<br>'
	+'let xhr=new XMLHHttpRequest();<br>'
	+'xhr.onload=function(){<br>'
		+'callback(this.responseText);<br>'
	+'};<br>'
	+'xhr.open("GET",url,true);<br>'
	+'xhr.send();}<br>'
+'export function getUsefulContents(url,callback){<br>'
	+'getJSON(url,(data)=>callback(JSON.parse(date))))<br>}<br>'
+'</li>'
+'<li type="disc"><h5>Основной код: main.js</h5>'
+'import { getUsefulContents } from "/modules/file.js";<br>'
+'getUsefulContents("http://www.example.com", (data) => {<br>'
	+'doSomethingUseful(data);<br>'
+'});<br></li>'
+'<li type="square"><h5>Динамический импорт</h5>'
+'<i>Загрузка модуля в зависимости от действий пользователя (тут import() используется '
+'совместно c await)</i><br>'
+'const main=document.querySelector("main");<br>'
+'for(const link of document.querySelectorAll("nav > a")){<br>'
+'	link.addEventListener("click",(e) => {<br>'
	+'	e.preventDefault();<br>'
+'		import("/modules/my_module.js")<br>'
		+'.then((module) => {<br>'
	+'		module.loadPageInfo(main);<br>'
+'		})<br>'
		+'.catch((err) => {<br>'
	+'		main.textContent=err.message;<br>'
+'}); }); }<br>'
+'</li><a>Как всем этим пользолваться, я не разбирался. Но код правильный - страницы загружаются</a><br>'
+'<li></li></ul>'
+'</ol>'
+'</td><td id="pravcool">'
+'<li><i>Предложение ввести два числа и последующее вычисленнее их суммы</i><br>'
+'let i,j,sum;<br>'
+'i=prompt("givo 2 cifry: "," ");<br>'
+'j=prompt("vtoraya"," ");<br>'
+'sum=+i+(+j);<br>'
+'alert(sum);</li>'
+'<ul><h5>Метка</h5>'
+'<i>Используются с операторами break и continue</i><br>'
+'<li type="square"><a>Пример интерактивный</a><br>'
+'let str="";<br>'
+'let s=prompt("final",""); <i>//5</i><br>'
+'loop1: for (let i = 0; i < s; i++){<br>'
	+'if (i === 3){  <i>//!</i><br>'
		+'continue loop1; <i>//!</i><br>'
	+'}<br>'
	+'str=str+i;<br>'
+'}<br>'
+'	alert(str); <i>//0124</i><br>'
+'</li>'
+'<li type="square"><a>Использование метки с оператором break в цикле</a><br>'
+'let i,j;<br>'
+'loop1: for (i = 0; i < 3; i++){ <i>//это первый цикл с меткой</i><br>'
  +' loop2: for (j = 0; j < 3; j++){ <i>//второй цикл</i><br>'
+'      if(i===1 && j ===1){<br>'
		+'  continue loop1;<br>'
	+'  }alert("i= " + i + ", j= "+ j);<br>'
+'}} <i>/*i= 0, j= 0<br>'
	  +'i= 0, j= 1<br>'
	+'  i= 0, j= 2<br>'
+'	  i= 1, j= 0<br>'
	  +'i= 2, j= 0<br>'
	+'  i= 2, j= 1<br>'
+'	  i= 2, j= 2*/</i><br></li>'
+'<li type="square"><a>Ещё одна примера:</a><i>(вычиляем число правильных ответов '
+'при тесте)</i><br></li><li>'
+'Ещё пример использолвания метки с break<br>'
+'<i>Смотрим все-ли элементы проходят все тесты</i><br>'
+'let allPass = true;<br>'
+'let i, j;<br>'
+'top: for (i = 0; i < items.length; i++) {<br>'
  +'for (j = 0; j < tests.length; j++) {<br>'
    +'if (!tests[j].pass(items[i])) {<br>'
      +'allPass = false;<br>'
      +'break top;}}<br>'
+'} <i>//вааще не понял, что к чему</i></li><br>'
+'<li type="square"></li>'
+'<li type="square"></li>'
+'</ul>'
+'</td></table>'

document.write(ifel); prod
 